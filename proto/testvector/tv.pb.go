//
// Copyright 2019-present Open Networking Foundation
//
// SPDX-License-Identifier: Apache-2.0

// This file includes the proto definitions for test vectors used for blackbox
// testing. For more details see go/blackbox-sw-qual.
// TODO: This is still WIP. Expect changes etc.
// TODO: The location of this file is not fixed yet. We need to find
// a better more permanent location for this proto file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.9.1
// source: testvector/tv.proto

package testvector

import (
	proto "github.com/golang/protobuf/proto"
	gnmi "github.com/openconfig/gnmi/proto/gnmi"
	v1 "github.com/p4lang/p4runtime/go/p4/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PortStimulus_State int32

const (
	PortStimulus_STATE_UNKNOWN     PortStimulus_State = 0
	PortStimulus_STATE_UP          PortStimulus_State = 1 // Port up.
	PortStimulus_STATE_DOWN        PortStimulus_State = 2 // Port down (different from not present)
	PortStimulus_STATE_NOT_PRESENT PortStimulus_State = 3 // emulate QSFFP module removal
)

// Enum value maps for PortStimulus_State.
var (
	PortStimulus_State_name = map[int32]string{
		0: "STATE_UNKNOWN",
		1: "STATE_UP",
		2: "STATE_DOWN",
		3: "STATE_NOT_PRESENT",
	}
	PortStimulus_State_value = map[string]int32{
		"STATE_UNKNOWN":     0,
		"STATE_UP":          1,
		"STATE_DOWN":        2,
		"STATE_NOT_PRESENT": 3,
	}
)

func (x PortStimulus_State) Enum() *PortStimulus_State {
	p := new(PortStimulus_State)
	*p = x
	return p
}

func (x PortStimulus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortStimulus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_testvector_tv_proto_enumTypes[0].Descriptor()
}

func (PortStimulus_State) Type() protoreflect.EnumType {
	return &file_testvector_tv_proto_enumTypes[0]
}

func (x PortStimulus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortStimulus_State.Descriptor instead.
func (PortStimulus_State) EnumDescriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{5, 0}
}

type ControlPlaneOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operations:
	//	*ControlPlaneOperation_WriteOperation_
	//	*ControlPlaneOperation_PacketOutOperation_
	//	*ControlPlaneOperation_PipelineConfigOperation_
	Operations isControlPlaneOperation_Operations `protobuf_oneof:"operations"`
}

func (x *ControlPlaneOperation) Reset() {
	*x = ControlPlaneOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlaneOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlaneOperation) ProtoMessage() {}

func (x *ControlPlaneOperation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlaneOperation.ProtoReflect.Descriptor instead.
func (*ControlPlaneOperation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{0}
}

func (m *ControlPlaneOperation) GetOperations() isControlPlaneOperation_Operations {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (x *ControlPlaneOperation) GetWriteOperation() *ControlPlaneOperation_WriteOperation {
	if x, ok := x.GetOperations().(*ControlPlaneOperation_WriteOperation_); ok {
		return x.WriteOperation
	}
	return nil
}

func (x *ControlPlaneOperation) GetPacketOutOperation() *ControlPlaneOperation_PacketOutOperation {
	if x, ok := x.GetOperations().(*ControlPlaneOperation_PacketOutOperation_); ok {
		return x.PacketOutOperation
	}
	return nil
}

func (x *ControlPlaneOperation) GetPipelineConfigOperation() *ControlPlaneOperation_PipelineConfigOperation {
	if x, ok := x.GetOperations().(*ControlPlaneOperation_PipelineConfigOperation_); ok {
		return x.PipelineConfigOperation
	}
	return nil
}

type isControlPlaneOperation_Operations interface {
	isControlPlaneOperation_Operations()
}

type ControlPlaneOperation_WriteOperation_ struct {
	WriteOperation *ControlPlaneOperation_WriteOperation `protobuf:"bytes,1,opt,name=write_operation,json=writeOperation,proto3,oneof"`
}

type ControlPlaneOperation_PacketOutOperation_ struct {
	PacketOutOperation *ControlPlaneOperation_PacketOutOperation `protobuf:"bytes,2,opt,name=packet_out_operation,json=packetOutOperation,proto3,oneof"`
}

type ControlPlaneOperation_PipelineConfigOperation_ struct {
	PipelineConfigOperation *ControlPlaneOperation_PipelineConfigOperation `protobuf:"bytes,3,opt,name=pipeline_config_operation,json=pipelineConfigOperation,proto3,oneof"`
}

func (*ControlPlaneOperation_WriteOperation_) isControlPlaneOperation_Operations() {}

func (*ControlPlaneOperation_PacketOutOperation_) isControlPlaneOperation_Operations() {}

func (*ControlPlaneOperation_PipelineConfigOperation_) isControlPlaneOperation_Operations() {}

type ControlPlaneExpectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expectations:
	//	*ControlPlaneExpectation_ReadExpectation_
	//	*ControlPlaneExpectation_PacketInExpectation_
	//	*ControlPlaneExpectation_PipelineConfigExpectation_
	Expectations isControlPlaneExpectation_Expectations `protobuf_oneof:"expectations"`
}

func (x *ControlPlaneExpectation) Reset() {
	*x = ControlPlaneExpectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlaneExpectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlaneExpectation) ProtoMessage() {}

func (x *ControlPlaneExpectation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlaneExpectation.ProtoReflect.Descriptor instead.
func (*ControlPlaneExpectation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{1}
}

func (m *ControlPlaneExpectation) GetExpectations() isControlPlaneExpectation_Expectations {
	if m != nil {
		return m.Expectations
	}
	return nil
}

func (x *ControlPlaneExpectation) GetReadExpectation() *ControlPlaneExpectation_ReadExpectation {
	if x, ok := x.GetExpectations().(*ControlPlaneExpectation_ReadExpectation_); ok {
		return x.ReadExpectation
	}
	return nil
}

func (x *ControlPlaneExpectation) GetPacketInExpectation() *ControlPlaneExpectation_PacketInExpectation {
	if x, ok := x.GetExpectations().(*ControlPlaneExpectation_PacketInExpectation_); ok {
		return x.PacketInExpectation
	}
	return nil
}

func (x *ControlPlaneExpectation) GetPipelineConfigExpectation() *ControlPlaneExpectation_PipelineConfigExpectation {
	if x, ok := x.GetExpectations().(*ControlPlaneExpectation_PipelineConfigExpectation_); ok {
		return x.PipelineConfigExpectation
	}
	return nil
}

type isControlPlaneExpectation_Expectations interface {
	isControlPlaneExpectation_Expectations()
}

type ControlPlaneExpectation_ReadExpectation_ struct {
	ReadExpectation *ControlPlaneExpectation_ReadExpectation `protobuf:"bytes,1,opt,name=read_expectation,json=readExpectation,proto3,oneof"`
}

type ControlPlaneExpectation_PacketInExpectation_ struct {
	PacketInExpectation *ControlPlaneExpectation_PacketInExpectation `protobuf:"bytes,2,opt,name=packet_in_expectation,json=packetInExpectation,proto3,oneof"`
}

type ControlPlaneExpectation_PipelineConfigExpectation_ struct {
	PipelineConfigExpectation *ControlPlaneExpectation_PipelineConfigExpectation `protobuf:"bytes,3,opt,name=pipeline_config_expectation,json=pipelineConfigExpectation,proto3,oneof"`
}

func (*ControlPlaneExpectation_ReadExpectation_) isControlPlaneExpectation_Expectations() {}

func (*ControlPlaneExpectation_PacketInExpectation_) isControlPlaneExpectation_Expectations() {}

func (*ControlPlaneExpectation_PipelineConfigExpectation_) isControlPlaneExpectation_Expectations() {}

type DataPlaneStimulus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Stimuli:
	//	*DataPlaneStimulus_TrafficStimulus_
	Stimuli isDataPlaneStimulus_Stimuli `protobuf_oneof:"stimuli"`
}

func (x *DataPlaneStimulus) Reset() {
	*x = DataPlaneStimulus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneStimulus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneStimulus) ProtoMessage() {}

func (x *DataPlaneStimulus) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneStimulus.ProtoReflect.Descriptor instead.
func (*DataPlaneStimulus) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{2}
}

func (m *DataPlaneStimulus) GetStimuli() isDataPlaneStimulus_Stimuli {
	if m != nil {
		return m.Stimuli
	}
	return nil
}

func (x *DataPlaneStimulus) GetTrafficStimulus() *DataPlaneStimulus_TrafficStimulus {
	if x, ok := x.GetStimuli().(*DataPlaneStimulus_TrafficStimulus_); ok {
		return x.TrafficStimulus
	}
	return nil
}

type isDataPlaneStimulus_Stimuli interface {
	isDataPlaneStimulus_Stimuli()
}

type DataPlaneStimulus_TrafficStimulus_ struct {
	TrafficStimulus *DataPlaneStimulus_TrafficStimulus `protobuf:"bytes,1,opt,name=traffic_stimulus,json=trafficStimulus,proto3,oneof"`
}

func (*DataPlaneStimulus_TrafficStimulus_) isDataPlaneStimulus_Stimuli() {}

type DataPlaneExpectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expectations:
	//	*DataPlaneExpectation_TrafficExpectation_
	Expectations isDataPlaneExpectation_Expectations `protobuf_oneof:"expectations"`
}

func (x *DataPlaneExpectation) Reset() {
	*x = DataPlaneExpectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneExpectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneExpectation) ProtoMessage() {}

func (x *DataPlaneExpectation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneExpectation.ProtoReflect.Descriptor instead.
func (*DataPlaneExpectation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{3}
}

func (m *DataPlaneExpectation) GetExpectations() isDataPlaneExpectation_Expectations {
	if m != nil {
		return m.Expectations
	}
	return nil
}

func (x *DataPlaneExpectation) GetTrafficExpectation() *DataPlaneExpectation_TrafficExpectation {
	if x, ok := x.GetExpectations().(*DataPlaneExpectation_TrafficExpectation_); ok {
		return x.TrafficExpectation
	}
	return nil
}

type isDataPlaneExpectation_Expectations interface {
	isDataPlaneExpectation_Expectations()
}

type DataPlaneExpectation_TrafficExpectation_ struct {
	TrafficExpectation *DataPlaneExpectation_TrafficExpectation `protobuf:"bytes,1,opt,name=traffic_expectation,json=trafficExpectation,proto3,oneof"`
}

func (*DataPlaneExpectation_TrafficExpectation_) isDataPlaneExpectation_Expectations() {}

// Config push, port speed change, port admin state change, trunk pruning.
type ConfigOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnmiSetRequest  *gnmi.SetRequest  `protobuf:"bytes,1,opt,name=gnmi_set_request,json=gnmiSetRequest,proto3" json:"gnmi_set_request,omitempty"`
	GnmiSetResponse *gnmi.SetResponse `protobuf:"bytes,2,opt,name=gnmi_set_response,json=gnmiSetResponse,proto3" json:"gnmi_set_response,omitempty"`
}

func (x *ConfigOperation) Reset() {
	*x = ConfigOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigOperation) ProtoMessage() {}

func (x *ConfigOperation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigOperation.ProtoReflect.Descriptor instead.
func (*ConfigOperation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigOperation) GetGnmiSetRequest() *gnmi.SetRequest {
	if x != nil {
		return x.GnmiSetRequest
	}
	return nil
}

func (x *ConfigOperation) GetGnmiSetResponse() *gnmi.SetResponse {
	if x != nil {
		return x.GnmiSetResponse
	}
	return nil
}

// Signal to a possibly external device to change the state of a port (aka
// interface). Note that this is different from changing the admin state of a
// port which is done via Set RPC.
type PortStimulus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface *gnmi.Path         `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	State     PortStimulus_State `protobuf:"varint,2,opt,name=state,proto3,enum=stratum.testing.PortStimulus_State" json:"state,omitempty"`
}

func (x *PortStimulus) Reset() {
	*x = PortStimulus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStimulus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStimulus) ProtoMessage() {}

func (x *PortStimulus) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStimulus.ProtoReflect.Descriptor instead.
func (*PortStimulus) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{5}
}

func (x *PortStimulus) GetInterface() *gnmi.Path {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *PortStimulus) GetState() PortStimulus_State {
	if x != nil {
		return x.State
	}
	return PortStimulus_STATE_UNKNOWN
}

// Signal to a possibly external device to simulate an alarm situation.
type AlarmStimulus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alarm *gnmi.Path `protobuf:"bytes,1,opt,name=alarm,proto3" json:"alarm,omitempty"` // TODO: Complete the proto.
}

func (x *AlarmStimulus) Reset() {
	*x = AlarmStimulus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmStimulus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmStimulus) ProtoMessage() {}

func (x *AlarmStimulus) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmStimulus.ProtoReflect.Descriptor instead.
func (*AlarmStimulus) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{6}
}

func (x *AlarmStimulus) GetAlarm() *gnmi.Path {
	if x != nil {
		return x.Alarm
	}
	return nil
}

type ConfigExpectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnmiGetRequest  *gnmi.GetRequest  `protobuf:"bytes,1,opt,name=gnmi_get_request,json=gnmiGetRequest,proto3" json:"gnmi_get_request,omitempty"`
	GnmiGetResponse *gnmi.GetResponse `protobuf:"bytes,2,opt,name=gnmi_get_response,json=gnmiGetResponse,proto3" json:"gnmi_get_response,omitempty"`
}

func (x *ConfigExpectation) Reset() {
	*x = ConfigExpectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigExpectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigExpectation) ProtoMessage() {}

func (x *ConfigExpectation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigExpectation.ProtoReflect.Descriptor instead.
func (*ConfigExpectation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigExpectation) GetGnmiGetRequest() *gnmi.GetRequest {
	if x != nil {
		return x.GnmiGetRequest
	}
	return nil
}

func (x *ConfigExpectation) GetGnmiGetResponse() *gnmi.GetResponse {
	if x != nil {
		return x.GnmiGetResponse
	}
	return nil
}

type TelemetryExpectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requirement *TelemetryExpectation_Requirement `protobuf:"bytes,1,opt,name=requirement,proto3" json:"requirement,omitempty"`
	// The single gNMI write request to send over the stream.
	GnmiSubscribeRequest *gnmi.SubscribeRequest `protobuf:"bytes,2,opt,name=gnmi_subscribe_request,json=gnmiSubscribeRequest,proto3" json:"gnmi_subscribe_request,omitempty"`
	// All the operations and/or stimuli to be run "after" the stream is created
	// and request has been sent. Optional. Not all the TVs will have this field
	// populated. Also, note that we can assume one can run "any" action here
	// (even a config push to packet I/O).
	ActionGroup *ActionGroup `protobuf:"bytes,3,opt,name=action_group,json=actionGroup,proto3" json:"action_group,omitempty"`
	// The minimum set of SubscribeResponse to be read from the stream "as soon
	// as it is created (not after sending the request). The order should match
	// the order of the messages read from the channel. As soon as these
	// protos are read from the channel within the specified timeout, we close
	// the channel set the test as PASSED. If timeout is reached before reading
	// all these messages, or if there is any other issue while reading the
	// messages, we still close the channel but set the test as FAILED.
	GnmiSubscribeResponse []*gnmi.SubscribeResponse `protobuf:"bytes,4,rep,name=gnmi_subscribe_response,json=gnmiSubscribeResponse,proto3" json:"gnmi_subscribe_response,omitempty"`
}

func (x *TelemetryExpectation) Reset() {
	*x = TelemetryExpectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryExpectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryExpectation) ProtoMessage() {}

func (x *TelemetryExpectation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryExpectation.ProtoReflect.Descriptor instead.
func (*TelemetryExpectation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{8}
}

func (x *TelemetryExpectation) GetRequirement() *TelemetryExpectation_Requirement {
	if x != nil {
		return x.Requirement
	}
	return nil
}

func (x *TelemetryExpectation) GetGnmiSubscribeRequest() *gnmi.SubscribeRequest {
	if x != nil {
		return x.GnmiSubscribeRequest
	}
	return nil
}

func (x *TelemetryExpectation) GetActionGroup() *ActionGroup {
	if x != nil {
		return x.ActionGroup
	}
	return nil
}

func (x *TelemetryExpectation) GetGnmiSubscribeResponse() []*gnmi.SubscribeResponse {
	if x != nil {
		return x.GnmiSubscribeResponse
	}
	return nil
}

type SecurityOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SecurityOperation) Reset() {
	*x = SecurityOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityOperation) ProtoMessage() {}

func (x *SecurityOperation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityOperation.ProtoReflect.Descriptor instead.
func (*SecurityOperation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{9}
}

type DiagOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DiagOperation) Reset() {
	*x = DiagOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagOperation) ProtoMessage() {}

func (x *DiagOperation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagOperation.ProtoReflect.Descriptor instead.
func (*DiagOperation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{10}
}

type SystemOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemOperation) Reset() {
	*x = SystemOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemOperation) ProtoMessage() {}

func (x *SystemOperation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemOperation.ProtoReflect.Descriptor instead.
func (*SystemOperation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{11}
}

type FileOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FileOperation) Reset() {
	*x = FileOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOperation) ProtoMessage() {}

func (x *FileOperation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOperation.ProtoReflect.Descriptor instead.
func (*FileOperation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{12}
}

type ManagementOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Flows:
	//	*ManagementOperation_SecurityOperation
	//	*ManagementOperation_DiagOperation
	//	*ManagementOperation_SystemOperation
	//	*ManagementOperation_FileOperation
	Flows isManagementOperation_Flows `protobuf_oneof:"flows"`
}

func (x *ManagementOperation) Reset() {
	*x = ManagementOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagementOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagementOperation) ProtoMessage() {}

func (x *ManagementOperation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagementOperation.ProtoReflect.Descriptor instead.
func (*ManagementOperation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{13}
}

func (m *ManagementOperation) GetFlows() isManagementOperation_Flows {
	if m != nil {
		return m.Flows
	}
	return nil
}

func (x *ManagementOperation) GetSecurityOperation() *SecurityOperation {
	if x, ok := x.GetFlows().(*ManagementOperation_SecurityOperation); ok {
		return x.SecurityOperation
	}
	return nil
}

func (x *ManagementOperation) GetDiagOperation() *DiagOperation {
	if x, ok := x.GetFlows().(*ManagementOperation_DiagOperation); ok {
		return x.DiagOperation
	}
	return nil
}

func (x *ManagementOperation) GetSystemOperation() *SystemOperation {
	if x, ok := x.GetFlows().(*ManagementOperation_SystemOperation); ok {
		return x.SystemOperation
	}
	return nil
}

func (x *ManagementOperation) GetFileOperation() *FileOperation {
	if x, ok := x.GetFlows().(*ManagementOperation_FileOperation); ok {
		return x.FileOperation
	}
	return nil
}

type isManagementOperation_Flows interface {
	isManagementOperation_Flows()
}

type ManagementOperation_SecurityOperation struct {
	SecurityOperation *SecurityOperation `protobuf:"bytes,1,opt,name=security_operation,json=securityOperation,proto3,oneof"`
}

type ManagementOperation_DiagOperation struct {
	DiagOperation *DiagOperation `protobuf:"bytes,2,opt,name=diag_operation,json=diagOperation,proto3,oneof"`
}

type ManagementOperation_SystemOperation struct {
	SystemOperation *SystemOperation `protobuf:"bytes,3,opt,name=system_operation,json=systemOperation,proto3,oneof"`
}

type ManagementOperation_FileOperation struct {
	FileOperation *FileOperation `protobuf:"bytes,4,opt,name=file_operation,json=fileOperation,proto3,oneof"`
}

func (*ManagementOperation_SecurityOperation) isManagementOperation_Flows() {}

func (*ManagementOperation_DiagOperation) isManagementOperation_Flows() {}

func (*ManagementOperation_SystemOperation) isManagementOperation_Flows() {}

func (*ManagementOperation_FileOperation) isManagementOperation_Flows() {}

// An action is either an operation or an external stimulus that affects the
// SUT.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requirement *Action_Requirement `protobuf:"bytes,1,opt,name=requirement,proto3" json:"requirement,omitempty"`
	// Types that are assignable to Actions:
	//	*Action_ConfigOperation
	//	*Action_ControlPlaneOperation
	//	*Action_DataPlaneStimulus
	//	*Action_ManagementOperation
	//	*Action_PortStimulus
	//	*Action_AlarmStimulus
	Actions isAction_Actions `protobuf_oneof:"actions"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{14}
}

func (x *Action) GetRequirement() *Action_Requirement {
	if x != nil {
		return x.Requirement
	}
	return nil
}

func (m *Action) GetActions() isAction_Actions {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (x *Action) GetConfigOperation() *ConfigOperation {
	if x, ok := x.GetActions().(*Action_ConfigOperation); ok {
		return x.ConfigOperation
	}
	return nil
}

func (x *Action) GetControlPlaneOperation() *ControlPlaneOperation {
	if x, ok := x.GetActions().(*Action_ControlPlaneOperation); ok {
		return x.ControlPlaneOperation
	}
	return nil
}

func (x *Action) GetDataPlaneStimulus() *DataPlaneStimulus {
	if x, ok := x.GetActions().(*Action_DataPlaneStimulus); ok {
		return x.DataPlaneStimulus
	}
	return nil
}

func (x *Action) GetManagementOperation() *ManagementOperation {
	if x, ok := x.GetActions().(*Action_ManagementOperation); ok {
		return x.ManagementOperation
	}
	return nil
}

func (x *Action) GetPortStimulus() *PortStimulus {
	if x, ok := x.GetActions().(*Action_PortStimulus); ok {
		return x.PortStimulus
	}
	return nil
}

func (x *Action) GetAlarmStimulus() *AlarmStimulus {
	if x, ok := x.GetActions().(*Action_AlarmStimulus); ok {
		return x.AlarmStimulus
	}
	return nil
}

type isAction_Actions interface {
	isAction_Actions()
}

type Action_ConfigOperation struct {
	ConfigOperation *ConfigOperation `protobuf:"bytes,2,opt,name=config_operation,json=configOperation,proto3,oneof"`
}

type Action_ControlPlaneOperation struct {
	ControlPlaneOperation *ControlPlaneOperation `protobuf:"bytes,3,opt,name=control_plane_operation,json=controlPlaneOperation,proto3,oneof"`
}

type Action_DataPlaneStimulus struct {
	DataPlaneStimulus *DataPlaneStimulus `protobuf:"bytes,4,opt,name=data_plane_stimulus,json=dataPlaneStimulus,proto3,oneof"`
}

type Action_ManagementOperation struct {
	ManagementOperation *ManagementOperation `protobuf:"bytes,5,opt,name=management_operation,json=managementOperation,proto3,oneof"`
}

type Action_PortStimulus struct {
	PortStimulus *PortStimulus `protobuf:"bytes,6,opt,name=port_stimulus,json=portStimulus,proto3,oneof"`
}

type Action_AlarmStimulus struct {
	AlarmStimulus *AlarmStimulus `protobuf:"bytes,7,opt,name=alarm_stimulus,json=alarmStimulus,proto3,oneof"`
}

func (*Action_ConfigOperation) isAction_Actions() {}

func (*Action_ControlPlaneOperation) isAction_Actions() {}

func (*Action_DataPlaneStimulus) isAction_Actions() {}

func (*Action_ManagementOperation) isAction_Actions() {}

func (*Action_PortStimulus) isAction_Actions() {}

func (*Action_AlarmStimulus) isAction_Actions() {}

type Expectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expectations:
	//	*Expectation_ConfigExpectation
	//	*Expectation_ControlPlaneExpectation
	//	*Expectation_DataPlaneExpectation
	//	*Expectation_TelemetryExpectation
	Expectations isExpectation_Expectations `protobuf_oneof:"expectations"`
	// A unique identifier for the expectation. The main purpose is to be able to
	// find the expectation in the text file upon a failure.
	ExpectationId string `protobuf:"bytes,5,opt,name=expectation_id,json=expectationId,proto3" json:"expectation_id,omitempty"`
}

func (x *Expectation) Reset() {
	*x = Expectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expectation) ProtoMessage() {}

func (x *Expectation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expectation.ProtoReflect.Descriptor instead.
func (*Expectation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{15}
}

func (m *Expectation) GetExpectations() isExpectation_Expectations {
	if m != nil {
		return m.Expectations
	}
	return nil
}

func (x *Expectation) GetConfigExpectation() *ConfigExpectation {
	if x, ok := x.GetExpectations().(*Expectation_ConfigExpectation); ok {
		return x.ConfigExpectation
	}
	return nil
}

func (x *Expectation) GetControlPlaneExpectation() *ControlPlaneExpectation {
	if x, ok := x.GetExpectations().(*Expectation_ControlPlaneExpectation); ok {
		return x.ControlPlaneExpectation
	}
	return nil
}

func (x *Expectation) GetDataPlaneExpectation() *DataPlaneExpectation {
	if x, ok := x.GetExpectations().(*Expectation_DataPlaneExpectation); ok {
		return x.DataPlaneExpectation
	}
	return nil
}

func (x *Expectation) GetTelemetryExpectation() *TelemetryExpectation {
	if x, ok := x.GetExpectations().(*Expectation_TelemetryExpectation); ok {
		return x.TelemetryExpectation
	}
	return nil
}

func (x *Expectation) GetExpectationId() string {
	if x != nil {
		return x.ExpectationId
	}
	return ""
}

type isExpectation_Expectations interface {
	isExpectation_Expectations()
}

type Expectation_ConfigExpectation struct {
	ConfigExpectation *ConfigExpectation `protobuf:"bytes,1,opt,name=config_expectation,json=configExpectation,proto3,oneof"`
}

type Expectation_ControlPlaneExpectation struct {
	ControlPlaneExpectation *ControlPlaneExpectation `protobuf:"bytes,2,opt,name=control_plane_expectation,json=controlPlaneExpectation,proto3,oneof"`
}

type Expectation_DataPlaneExpectation struct {
	DataPlaneExpectation *DataPlaneExpectation `protobuf:"bytes,3,opt,name=data_plane_expectation,json=dataPlaneExpectation,proto3,oneof"`
}

type Expectation_TelemetryExpectation struct {
	TelemetryExpectation *TelemetryExpectation `protobuf:"bytes,4,opt,name=telemetry_expectation,json=telemetryExpectation,proto3,oneof"`
}

func (*Expectation_ConfigExpectation) isExpectation_Expectations() {}

func (*Expectation_ControlPlaneExpectation) isExpectation_Expectations() {}

func (*Expectation_DataPlaneExpectation) isExpectation_Expectations() {}

func (*Expectation_TelemetryExpectation) isExpectation_Expectations() {}

// A group of actions to be run sequentially.
type SequentialActionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *SequentialActionGroup) Reset() {
	*x = SequentialActionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequentialActionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequentialActionGroup) ProtoMessage() {}

func (x *SequentialActionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequentialActionGroup.ProtoReflect.Descriptor instead.
func (*SequentialActionGroup) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{16}
}

func (x *SequentialActionGroup) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

// A group of actions to be run in parallel.
type ParallelActionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *ParallelActionGroup_Options `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	Actions []*Action                    `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *ParallelActionGroup) Reset() {
	*x = ParallelActionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParallelActionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParallelActionGroup) ProtoMessage() {}

func (x *ParallelActionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParallelActionGroup.ProtoReflect.Descriptor instead.
func (*ParallelActionGroup) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{17}
}

func (x *ParallelActionGroup) GetOptions() *ParallelActionGroup_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ParallelActionGroup) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

// A group of actions to be run randomly.
type RandomizedActionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *RandomizedActionGroup_Options `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	Actions []*Action                      `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *RandomizedActionGroup) Reset() {
	*x = RandomizedActionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomizedActionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomizedActionGroup) ProtoMessage() {}

func (x *RandomizedActionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomizedActionGroup.ProtoReflect.Descriptor instead.
func (*RandomizedActionGroup) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{18}
}

func (x *RandomizedActionGroup) GetOptions() *RandomizedActionGroup_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *RandomizedActionGroup) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ActionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ActionGroup:
	//	*ActionGroup_SequentialActionGroup
	//	*ActionGroup_ParallelActionGroup
	//	*ActionGroup_RandomizedActionGroup
	ActionGroup isActionGroup_ActionGroup `protobuf_oneof:"action_group"`
	// A unique identifier for the action group. The main purpose is to be able to
	// find the action group in the text file upon a failure.
	ActionGroupId string `protobuf:"bytes,4,opt,name=action_group_id,json=actionGroupId,proto3" json:"action_group_id,omitempty"`
}

func (x *ActionGroup) Reset() {
	*x = ActionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGroup) ProtoMessage() {}

func (x *ActionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGroup.ProtoReflect.Descriptor instead.
func (*ActionGroup) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{19}
}

func (m *ActionGroup) GetActionGroup() isActionGroup_ActionGroup {
	if m != nil {
		return m.ActionGroup
	}
	return nil
}

func (x *ActionGroup) GetSequentialActionGroup() *SequentialActionGroup {
	if x, ok := x.GetActionGroup().(*ActionGroup_SequentialActionGroup); ok {
		return x.SequentialActionGroup
	}
	return nil
}

func (x *ActionGroup) GetParallelActionGroup() *ParallelActionGroup {
	if x, ok := x.GetActionGroup().(*ActionGroup_ParallelActionGroup); ok {
		return x.ParallelActionGroup
	}
	return nil
}

func (x *ActionGroup) GetRandomizedActionGroup() *RandomizedActionGroup {
	if x, ok := x.GetActionGroup().(*ActionGroup_RandomizedActionGroup); ok {
		return x.RandomizedActionGroup
	}
	return nil
}

func (x *ActionGroup) GetActionGroupId() string {
	if x != nil {
		return x.ActionGroupId
	}
	return ""
}

type isActionGroup_ActionGroup interface {
	isActionGroup_ActionGroup()
}

type ActionGroup_SequentialActionGroup struct {
	SequentialActionGroup *SequentialActionGroup `protobuf:"bytes,1,opt,name=sequential_action_group,json=sequentialActionGroup,proto3,oneof"`
}

type ActionGroup_ParallelActionGroup struct {
	ParallelActionGroup *ParallelActionGroup `protobuf:"bytes,2,opt,name=parallel_action_group,json=parallelActionGroup,proto3,oneof"`
}

type ActionGroup_RandomizedActionGroup struct {
	RandomizedActionGroup *RandomizedActionGroup `protobuf:"bytes,3,opt,name=randomized_action_group,json=randomizedActionGroup,proto3,oneof"`
}

func (*ActionGroup_SequentialActionGroup) isActionGroup_ActionGroup() {}

func (*ActionGroup_ParallelActionGroup) isActionGroup_ActionGroup() {}

func (*ActionGroup_RandomizedActionGroup) isActionGroup_ActionGroup() {}

type TestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of actions (operations or external stimuli) to be run on the SUT.
	// Actions are bundled into groups with specific orders.
	ActionGroups []*ActionGroup `protobuf:"bytes,1,rep,name=action_groups,json=actionGroups,proto3" json:"action_groups,omitempty"`
	// Set of expectations "after" actions are all run.
	// 1- The test will not exercise the expectation if any of the operation
	// fails. 3- Checking expectations must not have any side effects on the
	// switch. 2- The test is expected to check all the expectations and return
	// the overall status including all the expectations that were not met.
	Expectations []*Expectation `protobuf:"bytes,2,rep,name=expectations,proto3" json:"expectations,omitempty"`
	// A unique identifier for the test case. The main purpose is to be able to
	// find the test case in the text file upon a failure.
	TestCaseId string `protobuf:"bytes,3,opt,name=test_case_id,json=testCaseId,proto3" json:"test_case_id,omitempty"`
}

func (x *TestCase) Reset() {
	*x = TestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCase) ProtoMessage() {}

func (x *TestCase) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCase.ProtoReflect.Descriptor instead.
func (*TestCase) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{20}
}

func (x *TestCase) GetActionGroups() []*ActionGroup {
	if x != nil {
		return x.ActionGroups
	}
	return nil
}

func (x *TestCase) GetExpectations() []*Expectation {
	if x != nil {
		return x.Expectations
	}
	return nil
}

func (x *TestCase) GetTestCaseId() string {
	if x != nil {
		return x.TestCaseId
	}
	return ""
}

type TestVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All the test cases which will be run on the switch. Order is important.
	TestCases []*TestCase `protobuf:"bytes,2,rep,name=test_cases,json=testCases,proto3" json:"test_cases,omitempty"`
}

func (x *TestVector) Reset() {
	*x = TestVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVector) ProtoMessage() {}

func (x *TestVector) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVector.ProtoReflect.Descriptor instead.
func (*TestVector) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{21}
}

func (x *TestVector) GetTestCases() []*TestCase {
	if x != nil {
		return x.TestCases
	}
	return nil
}

type ControlPlaneOperation_WriteOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The write request to program all the forwarding entries and its
	// corresponding RPC response.
	P4WriteRequest  *v1.WriteRequest  `protobuf:"bytes,1,opt,name=p4_write_request,json=p4WriteRequest,proto3" json:"p4_write_request,omitempty"`
	P4WriteResponse *v1.WriteResponse `protobuf:"bytes,2,opt,name=p4_write_response,json=p4WriteResponse,proto3" json:"p4_write_response,omitempty"`
}

func (x *ControlPlaneOperation_WriteOperation) Reset() {
	*x = ControlPlaneOperation_WriteOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlaneOperation_WriteOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlaneOperation_WriteOperation) ProtoMessage() {}

func (x *ControlPlaneOperation_WriteOperation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlaneOperation_WriteOperation.ProtoReflect.Descriptor instead.
func (*ControlPlaneOperation_WriteOperation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ControlPlaneOperation_WriteOperation) GetP4WriteRequest() *v1.WriteRequest {
	if x != nil {
		return x.P4WriteRequest
	}
	return nil
}

func (x *ControlPlaneOperation_WriteOperation) GetP4WriteResponse() *v1.WriteResponse {
	if x != nil {
		return x.P4WriteResponse
	}
	return nil
}

type ControlPlaneOperation_PacketOutOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the packet to be sent by the SDN controller to a dataplane port
	// or ingress pipeline. The packets are received by the P4Runtime agent and
	// sent to the switching chip via its CPU port.
	P4PacketOut *v1.PacketOut `protobuf:"bytes,1,opt,name=p4_packet_out,json=p4PacketOut,proto3" json:"p4_packet_out,omitempty"`
	// Number of packets to be sent out. A negative number refers to "continuous
	// mode".
	NumOfPackets int64 `protobuf:"varint,2,opt,name=num_of_packets,json=numOfPackets,proto3" json:"num_of_packets,omitempty"`
	// "min" and "max" speed at which packets will be sent to the CPU port.
	// Makes sense only if multiple packets are egressed. A zero speed means
	// "dont care".
	MinSpeedBps uint64 `protobuf:"varint,3,opt,name=min_speed_bps,json=minSpeedBps,proto3" json:"min_speed_bps,omitempty"`
	MaxSpeedBps uint64 `protobuf:"varint,4,opt,name=max_speed_bps,json=maxSpeedBps,proto3" json:"max_speed_bps,omitempty"`
	// class of service of the packets.
	Cos int32 `protobuf:"varint,5,opt,name=cos,proto3" json:"cos,omitempty"`
}

func (x *ControlPlaneOperation_PacketOutOperation) Reset() {
	*x = ControlPlaneOperation_PacketOutOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlaneOperation_PacketOutOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlaneOperation_PacketOutOperation) ProtoMessage() {}

func (x *ControlPlaneOperation_PacketOutOperation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlaneOperation_PacketOutOperation.ProtoReflect.Descriptor instead.
func (*ControlPlaneOperation_PacketOutOperation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ControlPlaneOperation_PacketOutOperation) GetP4PacketOut() *v1.PacketOut {
	if x != nil {
		return x.P4PacketOut
	}
	return nil
}

func (x *ControlPlaneOperation_PacketOutOperation) GetNumOfPackets() int64 {
	if x != nil {
		return x.NumOfPackets
	}
	return 0
}

func (x *ControlPlaneOperation_PacketOutOperation) GetMinSpeedBps() uint64 {
	if x != nil {
		return x.MinSpeedBps
	}
	return 0
}

func (x *ControlPlaneOperation_PacketOutOperation) GetMaxSpeedBps() uint64 {
	if x != nil {
		return x.MaxSpeedBps
	}
	return 0
}

func (x *ControlPlaneOperation_PacketOutOperation) GetCos() int32 {
	if x != nil {
		return x.Cos
	}
	return 0
}

type ControlPlaneOperation_PipelineConfigOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The forwarding pipeline config to push to the switch, to test setting
	// and/or mutating the config directly via P4Runtime API, and its expected
	// RPC response. Note that forwarding pipeline config is also set via gNMI.
	P4SetPipelineConfigRequest  *v1.SetForwardingPipelineConfigRequest  `protobuf:"bytes,1,opt,name=p4_set_pipeline_config_request,json=p4SetPipelineConfigRequest,proto3" json:"p4_set_pipeline_config_request,omitempty"`
	P4SetPipelineConfigResponse *v1.SetForwardingPipelineConfigResponse `protobuf:"bytes,2,opt,name=p4_set_pipeline_config_response,json=p4SetPipelineConfigResponse,proto3" json:"p4_set_pipeline_config_response,omitempty"`
}

func (x *ControlPlaneOperation_PipelineConfigOperation) Reset() {
	*x = ControlPlaneOperation_PipelineConfigOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlaneOperation_PipelineConfigOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlaneOperation_PipelineConfigOperation) ProtoMessage() {}

func (x *ControlPlaneOperation_PipelineConfigOperation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlaneOperation_PipelineConfigOperation.ProtoReflect.Descriptor instead.
func (*ControlPlaneOperation_PipelineConfigOperation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ControlPlaneOperation_PipelineConfigOperation) GetP4SetPipelineConfigRequest() *v1.SetForwardingPipelineConfigRequest {
	if x != nil {
		return x.P4SetPipelineConfigRequest
	}
	return nil
}

func (x *ControlPlaneOperation_PipelineConfigOperation) GetP4SetPipelineConfigResponse() *v1.SetForwardingPipelineConfigResponse {
	if x != nil {
		return x.P4SetPipelineConfigResponse
	}
	return nil
}

type ControlPlaneExpectation_ReadExpectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P4ReadRequest *v1.ReadRequest `protobuf:"bytes,1,opt,name=p4_read_request,json=p4ReadRequest,proto3" json:"p4_read_request,omitempty"`
	// Set of ReadResponse protos read from the streaming channel. Note that
	// for the case of Read RPC, channel has to close after all these responses
	// are sent back.
	P4ReadResponses []*v1.ReadResponse `protobuf:"bytes,2,rep,name=p4_read_responses,json=p4ReadResponses,proto3" json:"p4_read_responses,omitempty"`
}

func (x *ControlPlaneExpectation_ReadExpectation) Reset() {
	*x = ControlPlaneExpectation_ReadExpectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlaneExpectation_ReadExpectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlaneExpectation_ReadExpectation) ProtoMessage() {}

func (x *ControlPlaneExpectation_ReadExpectation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlaneExpectation_ReadExpectation.ProtoReflect.Descriptor instead.
func (*ControlPlaneExpectation_ReadExpectation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ControlPlaneExpectation_ReadExpectation) GetP4ReadRequest() *v1.ReadRequest {
	if x != nil {
		return x.P4ReadRequest
	}
	return nil
}

func (x *ControlPlaneExpectation_ReadExpectation) GetP4ReadResponses() []*v1.ReadResponse {
	if x != nil {
		return x.P4ReadResponses
	}
	return nil
}

type ControlPlaneExpectation_PacketInExpectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the packet to be received on the CPU port and sent to the SDN
	// SDN controller.
	P4PacketIn *v1.PacketIn `protobuf:"bytes,1,opt,name=p4_packet_in,json=p4PacketIn,proto3" json:"p4_packet_in,omitempty"`
	// number of packets to be received. A negative number refers to "continuous
	// mode".
	NumOfPackets int64 `protobuf:"varint,2,opt,name=num_of_packets,json=numOfPackets,proto3" json:"num_of_packets,omitempty"`
	// "min" and "max" speed at which packets will be received at CPU port.
	// Makes sense if multiple packets are ingressed. A zero speed means "dont
	// care". If min and max speeds are the same and positive, the measured
	// speed will be strictly checked to be the same as the value specified.
	// Expected speeds are are typically specified to test rate limiting.
	MinSpeedBps uint64 `protobuf:"varint,3,opt,name=min_speed_bps,json=minSpeedBps,proto3" json:"min_speed_bps,omitempty"`
	MaxSpeedBps uint64 `protobuf:"varint,4,opt,name=max_speed_bps,json=maxSpeedBps,proto3" json:"max_speed_bps,omitempty"`
	// class of service of the packets.
	Cos int32 `protobuf:"varint,5,opt,name=cos,proto3" json:"cos,omitempty"`
}

func (x *ControlPlaneExpectation_PacketInExpectation) Reset() {
	*x = ControlPlaneExpectation_PacketInExpectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlaneExpectation_PacketInExpectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlaneExpectation_PacketInExpectation) ProtoMessage() {}

func (x *ControlPlaneExpectation_PacketInExpectation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlaneExpectation_PacketInExpectation.ProtoReflect.Descriptor instead.
func (*ControlPlaneExpectation_PacketInExpectation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ControlPlaneExpectation_PacketInExpectation) GetP4PacketIn() *v1.PacketIn {
	if x != nil {
		return x.P4PacketIn
	}
	return nil
}

func (x *ControlPlaneExpectation_PacketInExpectation) GetNumOfPackets() int64 {
	if x != nil {
		return x.NumOfPackets
	}
	return 0
}

func (x *ControlPlaneExpectation_PacketInExpectation) GetMinSpeedBps() uint64 {
	if x != nil {
		return x.MinSpeedBps
	}
	return 0
}

func (x *ControlPlaneExpectation_PacketInExpectation) GetMaxSpeedBps() uint64 {
	if x != nil {
		return x.MaxSpeedBps
	}
	return 0
}

func (x *ControlPlaneExpectation_PacketInExpectation) GetCos() int32 {
	if x != nil {
		return x.Cos
	}
	return 0
}

type ControlPlaneExpectation_PipelineConfigExpectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P4GetPipelineConfigRequest  *v1.GetForwardingPipelineConfigRequest  `protobuf:"bytes,1,opt,name=p4_get_pipeline_config_request,json=p4GetPipelineConfigRequest,proto3" json:"p4_get_pipeline_config_request,omitempty"`
	P4GetPipelineConfigResponse *v1.GetForwardingPipelineConfigResponse `protobuf:"bytes,2,opt,name=p4_get_pipeline_config_response,json=p4GetPipelineConfigResponse,proto3" json:"p4_get_pipeline_config_response,omitempty"`
}

func (x *ControlPlaneExpectation_PipelineConfigExpectation) Reset() {
	*x = ControlPlaneExpectation_PipelineConfigExpectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPlaneExpectation_PipelineConfigExpectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPlaneExpectation_PipelineConfigExpectation) ProtoMessage() {}

func (x *ControlPlaneExpectation_PipelineConfigExpectation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPlaneExpectation_PipelineConfigExpectation.ProtoReflect.Descriptor instead.
func (*ControlPlaneExpectation_PipelineConfigExpectation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{1, 2}
}

func (x *ControlPlaneExpectation_PipelineConfigExpectation) GetP4GetPipelineConfigRequest() *v1.GetForwardingPipelineConfigRequest {
	if x != nil {
		return x.P4GetPipelineConfigRequest
	}
	return nil
}

func (x *ControlPlaneExpectation_PipelineConfigExpectation) GetP4GetPipelineConfigResponse() *v1.GetForwardingPipelineConfigResponse {
	if x != nil {
		return x.P4GetPipelineConfigResponse
	}
	return nil
}

// Defines the external data plane traffic stimulus. To be generated by a
// traffic gen and sent to a port (ingress to switch). There will be one flow
// per port.
type DataPlaneStimulus_TrafficStimulus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the node/device (defined in the config pushed beforehand via
	// gNMI).
	DeviceId uint64 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// SDN port/trunk number (defined in the config pushed beforehand via gNMI).
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The packets to be sent to the port one after another. The order of the
	// repeated field defines the order in which the packets will be sent to the
	// port by the traffic gen.
	Packets []*DataPlaneStimulus_TrafficStimulus_Packet `protobuf:"bytes,3,rep,name=packets,proto3" json:"packets,omitempty"`
	// The # of times traffic generators sends all the packet (defined by
	// "packets" above) to the port. A negative number refers to "continuous
	// mode".
	NumOfReplicas int64 `protobuf:"varint,4,opt,name=num_of_replicas,json=numOfReplicas,proto3" json:"num_of_replicas,omitempty"`
	// "min" and "max" speed at which the packets will be generated by traffic
	// gen. Defines an interval for the acceptable rate for the generated
	// packets.
	MinSpeedBps uint64 `protobuf:"varint,5,opt,name=min_speed_bps,json=minSpeedBps,proto3" json:"min_speed_bps,omitempty"`
	MaxSpeedBps uint64 `protobuf:"varint,6,opt,name=max_speed_bps,json=maxSpeedBps,proto3" json:"max_speed_bps,omitempty"`
	// class of service for the generated packet.
	Cos int32 `protobuf:"varint,7,opt,name=cos,proto3" json:"cos,omitempty"`
}

func (x *DataPlaneStimulus_TrafficStimulus) Reset() {
	*x = DataPlaneStimulus_TrafficStimulus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneStimulus_TrafficStimulus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneStimulus_TrafficStimulus) ProtoMessage() {}

func (x *DataPlaneStimulus_TrafficStimulus) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneStimulus_TrafficStimulus.ProtoReflect.Descriptor instead.
func (*DataPlaneStimulus_TrafficStimulus) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{2, 0}
}

func (x *DataPlaneStimulus_TrafficStimulus) GetDeviceId() uint64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *DataPlaneStimulus_TrafficStimulus) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DataPlaneStimulus_TrafficStimulus) GetPackets() []*DataPlaneStimulus_TrafficStimulus_Packet {
	if x != nil {
		return x.Packets
	}
	return nil
}

func (x *DataPlaneStimulus_TrafficStimulus) GetNumOfReplicas() int64 {
	if x != nil {
		return x.NumOfReplicas
	}
	return 0
}

func (x *DataPlaneStimulus_TrafficStimulus) GetMinSpeedBps() uint64 {
	if x != nil {
		return x.MinSpeedBps
	}
	return 0
}

func (x *DataPlaneStimulus_TrafficStimulus) GetMaxSpeedBps() uint64 {
	if x != nil {
		return x.MaxSpeedBps
	}
	return 0
}

func (x *DataPlaneStimulus_TrafficStimulus) GetCos() int32 {
	if x != nil {
		return x.Cos
	}
	return 0
}

type DataPlaneStimulus_TrafficStimulus_Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// raw packet
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *DataPlaneStimulus_TrafficStimulus_Packet) Reset() {
	*x = DataPlaneStimulus_TrafficStimulus_Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneStimulus_TrafficStimulus_Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneStimulus_TrafficStimulus_Packet) ProtoMessage() {}

func (x *DataPlaneStimulus_TrafficStimulus_Packet) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneStimulus_TrafficStimulus_Packet.ProtoReflect.Descriptor instead.
func (*DataPlaneStimulus_TrafficStimulus_Packet) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *DataPlaneStimulus_TrafficStimulus_Packet) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type DataPlaneExpectation_TrafficExpectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the node/device (defined in the config pushed beforehand via
	// gNMI).
	DeviceId uint64 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Output packet may come out of one of these ports
	Ports []uint32 `protobuf:"varint,2,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The packets to come out of the port(s) one after another. The order of
	// the repeated field defines the order in which the packets will be
	// egressed.
	Packets []*DataPlaneExpectation_TrafficExpectation_Packet `protobuf:"bytes,3,rep,name=packets,proto3" json:"packets,omitempty"`
	// The # of times all the packet (defined by "packets" above) will be sent
	// out of the port(s). A negative number refers to "continuous mode".
	NumOfReplicas int64 `protobuf:"varint,4,opt,name=num_of_replicas,json=numOfReplicas,proto3" json:"num_of_replicas,omitempty"`
	// Speed at which the packets will be sent out of the port(s). Defines an
	// interval for the acceptable rate for the received packets. If min and max
	// speeds are the same and positive, the measured speed will be strictly
	// checked to be the same as the value specified.
	MinSpeedBps uint64 `protobuf:"varint,5,opt,name=min_speed_bps,json=minSpeedBps,proto3" json:"min_speed_bps,omitempty"`
	MaxSpeedBps uint64 `protobuf:"varint,6,opt,name=max_speed_bps,json=maxSpeedBps,proto3" json:"max_speed_bps,omitempty"`
	// Packet distribution. Dont care if there is one egress port. Used to test
	// hashing.
	Distribution *DataPlaneExpectation_TrafficExpectation_Distribution `protobuf:"bytes,7,opt,name=distribution,proto3" json:"distribution,omitempty"`
	// class of service of the packets.
	Cos int32 `protobuf:"varint,8,opt,name=cos,proto3" json:"cos,omitempty"`
}

func (x *DataPlaneExpectation_TrafficExpectation) Reset() {
	*x = DataPlaneExpectation_TrafficExpectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneExpectation_TrafficExpectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneExpectation_TrafficExpectation) ProtoMessage() {}

func (x *DataPlaneExpectation_TrafficExpectation) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneExpectation_TrafficExpectation.ProtoReflect.Descriptor instead.
func (*DataPlaneExpectation_TrafficExpectation) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{3, 0}
}

func (x *DataPlaneExpectation_TrafficExpectation) GetDeviceId() uint64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *DataPlaneExpectation_TrafficExpectation) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *DataPlaneExpectation_TrafficExpectation) GetPackets() []*DataPlaneExpectation_TrafficExpectation_Packet {
	if x != nil {
		return x.Packets
	}
	return nil
}

func (x *DataPlaneExpectation_TrafficExpectation) GetNumOfReplicas() int64 {
	if x != nil {
		return x.NumOfReplicas
	}
	return 0
}

func (x *DataPlaneExpectation_TrafficExpectation) GetMinSpeedBps() uint64 {
	if x != nil {
		return x.MinSpeedBps
	}
	return 0
}

func (x *DataPlaneExpectation_TrafficExpectation) GetMaxSpeedBps() uint64 {
	if x != nil {
		return x.MaxSpeedBps
	}
	return 0
}

func (x *DataPlaneExpectation_TrafficExpectation) GetDistribution() *DataPlaneExpectation_TrafficExpectation_Distribution {
	if x != nil {
		return x.Distribution
	}
	return nil
}

func (x *DataPlaneExpectation_TrafficExpectation) GetCos() int32 {
	if x != nil {
		return x.Cos
	}
	return 0
}

// Define packet out distribution in case packets are sent to an ECMP group
// ( i.e. more than one output ports are given).
type DataPlaneExpectation_TrafficExpectation_Distribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataPlaneExpectation_TrafficExpectation_Distribution) Reset() {
	*x = DataPlaneExpectation_TrafficExpectation_Distribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneExpectation_TrafficExpectation_Distribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneExpectation_TrafficExpectation_Distribution) ProtoMessage() {}

func (x *DataPlaneExpectation_TrafficExpectation_Distribution) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneExpectation_TrafficExpectation_Distribution.ProtoReflect.Descriptor instead.
func (*DataPlaneExpectation_TrafficExpectation_Distribution) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{3, 0, 0}
}

type DataPlaneExpectation_TrafficExpectation_Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// raw packet
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *DataPlaneExpectation_TrafficExpectation_Packet) Reset() {
	*x = DataPlaneExpectation_TrafficExpectation_Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPlaneExpectation_TrafficExpectation_Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPlaneExpectation_TrafficExpectation_Packet) ProtoMessage() {}

func (x *DataPlaneExpectation_TrafficExpectation_Packet) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPlaneExpectation_TrafficExpectation_Packet.ProtoReflect.Descriptor instead.
func (*DataPlaneExpectation_TrafficExpectation_Packet) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{3, 0, 1}
}

func (x *DataPlaneExpectation_TrafficExpectation_Packet) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// As part of each telemetry expectation, we open a "new" subscription
// channel, send one SubscribeRequest, optionally do some actions (operations
// or stimuli), and verify the SubscribeResponse messages we read from the
// stream. Note that TelemetryExpectation is the only expectation message that
// includes the actions as part of it, as it needs to specify the actions done
// after the streaming channel is created (actions before channel creation are
// already part of an external ActionGroup message, no need to put them here).
// The SubscribeResponse messages are read using a different thread, that is
// spawned as soon as the stream is opened, before sending any request.
// Anything read from the channel is saved with exact timestamp for later
// verification. We clearly specify what needs to be read from the channel as
// part of the test. We also make sure all the requirements (e.g. timing
// requirements) are specified as well. Note that even in case of streaming a
// leaf value with certain frequency, we can limit the number of protos read
// from the channel within a certain period of time. Here is an example:
// -  Port status test over gNMI: Specify a timeout for the port event,
//    specify a series of port UP/DOWN stimulus (using PortStimulus above) in
//    action_group, in gnmi_subscribe_request specify that you want to
//    subscribe to a specific interface port state leaf, and finally specify
//    the series of messages you expect to receive over the stream in
//    gnmi_subscribe_response. The test client will create a stream channel
//    and start listening to messages in a separate thread. Sends the requests
//    over the stream and logs the responses. If it detects the port event
//    sequence exactly the way it was described within the time out, the test
//    passes. Otherwise it fails.
type TelemetryExpectation_Requirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TelemetryExpectation_Requirement) Reset() {
	*x = TelemetryExpectation_Requirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryExpectation_Requirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryExpectation_Requirement) ProtoMessage() {}

func (x *TelemetryExpectation_Requirement) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryExpectation_Requirement.ProtoReflect.Descriptor instead.
func (*TelemetryExpectation_Requirement) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{8, 0}
}

type Action_Requirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Action_Requirement) Reset() {
	*x = Action_Requirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action_Requirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_Requirement) ProtoMessage() {}

func (x *Action_Requirement) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_Requirement.ProtoReflect.Descriptor instead.
func (*Action_Requirement) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{14, 0}
}

type ParallelActionGroup_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ParallelActionGroup_Options) Reset() {
	*x = ParallelActionGroup_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParallelActionGroup_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParallelActionGroup_Options) ProtoMessage() {}

func (x *ParallelActionGroup_Options) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParallelActionGroup_Options.ProtoReflect.Descriptor instead.
func (*ParallelActionGroup_Options) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{17, 0}
}

type RandomizedActionGroup_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RandomizedActionGroup_Options) Reset() {
	*x = RandomizedActionGroup_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testvector_tv_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomizedActionGroup_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomizedActionGroup_Options) ProtoMessage() {}

func (x *RandomizedActionGroup_Options) ProtoReflect() protoreflect.Message {
	mi := &file_testvector_tv_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomizedActionGroup_Options.ProtoReflect.Descriptor instead.
func (*RandomizedActionGroup_Options) Descriptor() ([]byte, []int) {
	return file_testvector_tv_proto_rawDescGZIP(), []int{18, 0}
}

var File_testvector_tv_proto protoreflect.FileDescriptor

var file_testvector_tv_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x74, 0x76, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x15, 0x70, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x34,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x67,
	0x6e, 0x6d, 0x69, 0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2,
	0x07, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x14, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x75, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x19, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x91, 0x01, 0x0a, 0x0e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x10, 0x70, 0x34,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x34, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x70, 0x34, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x70, 0x34, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x34, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x70, 0x34, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xca, 0x01, 0x0a, 0x12,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0d, 0x70, 0x34, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x34, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x52, 0x0b, 0x70, 0x34, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f,
	0x6f, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42,
	0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x62, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x42, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6f, 0x73, 0x1a, 0xfa, 0x01, 0x0a, 0x17, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x1e, 0x70, 0x34, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x34, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1a, 0x70, 0x34, 0x53, 0x65, 0x74, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1f, 0x70, 0x34, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x34, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1b, 0x70, 0x34, 0x53, 0x65, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xe6, 0x07, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x65, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x15, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x8e, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x34, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0d, 0x70, 0x34, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x11, 0x70, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x34, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0f, 0x70, 0x34, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0c, 0x70, 0x34,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x34, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x6e, 0x52, 0x0a, 0x70, 0x34, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x12, 0x24, 0x0a,
	0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x42, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6f, 0x73, 0x1a, 0xfc, 0x01,
	0x0a, 0x19, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x1e, 0x70,
	0x34, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x34, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1a,
	0x70, 0x34, 0x47, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1f, 0x70, 0x34,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x34, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x1b, 0x70, 0x34, 0x47, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbf, 0x03, 0x0a,
	0x11, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c,
	0x75, 0x73, 0x12, 0x5f, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x74,
	0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73,
	0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x69, 0x6d, 0x75,
	0x6c, 0x75, 0x73, 0x1a, 0xbd, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53,
	0x74, 0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x70, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6f, 0x73, 0x1a,
	0x22, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x69, 0x22, 0xd9,
	0x04, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc3, 0x03, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x59,
	0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62,
	0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x42, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x70, 0x73, 0x12, 0x69, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x63, 0x6f, 0x73, 0x1a, 0x0e, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x10, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x6e, 0x6d, 0x69,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x11, 0x67, 0x6e,
	0x6d, 0x69, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x67, 0x6e, 0x6d, 0x69, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x4f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x22, 0x31, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x75,
	0x73, 0x12, 0x20, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x10, 0x67, 0x6e, 0x6d,
	0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x6e, 0x6d, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x11, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0f, 0x67, 0x6e, 0x6d, 0x69, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x14, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x16, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x14, 0x67, 0x6e, 0x6d, 0x69,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x4f, 0x0a, 0x17, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x15, 0x67, 0x6e, 0x6d,
	0x69, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x1a, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x44, 0x69, 0x61, 0x67, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x02, 0x0a, 0x13,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x67,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x22, 0xda, 0x04, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74,
	0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73, 0x48, 0x00, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x74, 0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x0e,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x69, 0x6d,
	0x75, 0x6c, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x69,
	0x6d, 0x75, 0x6c, 0x75, 0x73, 0x1a, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xbe, 0x03, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75,
	0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x16,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x15, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x14, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x4a, 0x0a, 0x15, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9b, 0x01, 0x0a,
	0x13, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x46, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x09, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x09, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe5, 0x02, 0x0a,
	0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x60, 0x0a, 0x17,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5a,
	0x0a, 0x15, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x60, 0x0a, 0x17, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x15, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0xb1, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x75, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73,
	0x42, 0x34, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x80, 0x01, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testvector_tv_proto_rawDescOnce sync.Once
	file_testvector_tv_proto_rawDescData = file_testvector_tv_proto_rawDesc
)

func file_testvector_tv_proto_rawDescGZIP() []byte {
	file_testvector_tv_proto_rawDescOnce.Do(func() {
		file_testvector_tv_proto_rawDescData = protoimpl.X.CompressGZIP(file_testvector_tv_proto_rawDescData)
	})
	return file_testvector_tv_proto_rawDescData
}

var file_testvector_tv_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_testvector_tv_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_testvector_tv_proto_goTypes = []interface{}{
	(PortStimulus_State)(0),                                      // 0: stratum.testing.PortStimulus.State
	(*ControlPlaneOperation)(nil),                                // 1: stratum.testing.ControlPlaneOperation
	(*ControlPlaneExpectation)(nil),                              // 2: stratum.testing.ControlPlaneExpectation
	(*DataPlaneStimulus)(nil),                                    // 3: stratum.testing.DataPlaneStimulus
	(*DataPlaneExpectation)(nil),                                 // 4: stratum.testing.DataPlaneExpectation
	(*ConfigOperation)(nil),                                      // 5: stratum.testing.ConfigOperation
	(*PortStimulus)(nil),                                         // 6: stratum.testing.PortStimulus
	(*AlarmStimulus)(nil),                                        // 7: stratum.testing.AlarmStimulus
	(*ConfigExpectation)(nil),                                    // 8: stratum.testing.ConfigExpectation
	(*TelemetryExpectation)(nil),                                 // 9: stratum.testing.TelemetryExpectation
	(*SecurityOperation)(nil),                                    // 10: stratum.testing.SecurityOperation
	(*DiagOperation)(nil),                                        // 11: stratum.testing.DiagOperation
	(*SystemOperation)(nil),                                      // 12: stratum.testing.SystemOperation
	(*FileOperation)(nil),                                        // 13: stratum.testing.FileOperation
	(*ManagementOperation)(nil),                                  // 14: stratum.testing.ManagementOperation
	(*Action)(nil),                                               // 15: stratum.testing.Action
	(*Expectation)(nil),                                          // 16: stratum.testing.Expectation
	(*SequentialActionGroup)(nil),                                // 17: stratum.testing.SequentialActionGroup
	(*ParallelActionGroup)(nil),                                  // 18: stratum.testing.ParallelActionGroup
	(*RandomizedActionGroup)(nil),                                // 19: stratum.testing.RandomizedActionGroup
	(*ActionGroup)(nil),                                          // 20: stratum.testing.ActionGroup
	(*TestCase)(nil),                                             // 21: stratum.testing.TestCase
	(*TestVector)(nil),                                           // 22: stratum.testing.TestVector
	(*ControlPlaneOperation_WriteOperation)(nil),                 // 23: stratum.testing.ControlPlaneOperation.WriteOperation
	(*ControlPlaneOperation_PacketOutOperation)(nil),             // 24: stratum.testing.ControlPlaneOperation.PacketOutOperation
	(*ControlPlaneOperation_PipelineConfigOperation)(nil),        // 25: stratum.testing.ControlPlaneOperation.PipelineConfigOperation
	(*ControlPlaneExpectation_ReadExpectation)(nil),              // 26: stratum.testing.ControlPlaneExpectation.ReadExpectation
	(*ControlPlaneExpectation_PacketInExpectation)(nil),          // 27: stratum.testing.ControlPlaneExpectation.PacketInExpectation
	(*ControlPlaneExpectation_PipelineConfigExpectation)(nil),    // 28: stratum.testing.ControlPlaneExpectation.PipelineConfigExpectation
	(*DataPlaneStimulus_TrafficStimulus)(nil),                    // 29: stratum.testing.DataPlaneStimulus.TrafficStimulus
	(*DataPlaneStimulus_TrafficStimulus_Packet)(nil),             // 30: stratum.testing.DataPlaneStimulus.TrafficStimulus.Packet
	(*DataPlaneExpectation_TrafficExpectation)(nil),              // 31: stratum.testing.DataPlaneExpectation.TrafficExpectation
	(*DataPlaneExpectation_TrafficExpectation_Distribution)(nil), // 32: stratum.testing.DataPlaneExpectation.TrafficExpectation.Distribution
	(*DataPlaneExpectation_TrafficExpectation_Packet)(nil),       // 33: stratum.testing.DataPlaneExpectation.TrafficExpectation.Packet
	(*TelemetryExpectation_Requirement)(nil),                     // 34: stratum.testing.TelemetryExpectation.Requirement
	(*Action_Requirement)(nil),                                   // 35: stratum.testing.Action.Requirement
	(*ParallelActionGroup_Options)(nil),                          // 36: stratum.testing.ParallelActionGroup.Options
	(*RandomizedActionGroup_Options)(nil),                        // 37: stratum.testing.RandomizedActionGroup.Options
	(*gnmi.SetRequest)(nil),                                      // 38: gnmi.SetRequest
	(*gnmi.SetResponse)(nil),                                     // 39: gnmi.SetResponse
	(*gnmi.Path)(nil),                                            // 40: gnmi.Path
	(*gnmi.GetRequest)(nil),                                      // 41: gnmi.GetRequest
	(*gnmi.GetResponse)(nil),                                     // 42: gnmi.GetResponse
	(*gnmi.SubscribeRequest)(nil),                                // 43: gnmi.SubscribeRequest
	(*gnmi.SubscribeResponse)(nil),                               // 44: gnmi.SubscribeResponse
	(*v1.WriteRequest)(nil),                                      // 45: p4.v1.WriteRequest
	(*v1.WriteResponse)(nil),                                     // 46: p4.v1.WriteResponse
	(*v1.PacketOut)(nil),                                         // 47: p4.v1.PacketOut
	(*v1.SetForwardingPipelineConfigRequest)(nil),                // 48: p4.v1.SetForwardingPipelineConfigRequest
	(*v1.SetForwardingPipelineConfigResponse)(nil),               // 49: p4.v1.SetForwardingPipelineConfigResponse
	(*v1.ReadRequest)(nil),                                       // 50: p4.v1.ReadRequest
	(*v1.ReadResponse)(nil),                                      // 51: p4.v1.ReadResponse
	(*v1.PacketIn)(nil),                                          // 52: p4.v1.PacketIn
	(*v1.GetForwardingPipelineConfigRequest)(nil),                // 53: p4.v1.GetForwardingPipelineConfigRequest
	(*v1.GetForwardingPipelineConfigResponse)(nil),               // 54: p4.v1.GetForwardingPipelineConfigResponse
}
var file_testvector_tv_proto_depIdxs = []int32{
	23, // 0: stratum.testing.ControlPlaneOperation.write_operation:type_name -> stratum.testing.ControlPlaneOperation.WriteOperation
	24, // 1: stratum.testing.ControlPlaneOperation.packet_out_operation:type_name -> stratum.testing.ControlPlaneOperation.PacketOutOperation
	25, // 2: stratum.testing.ControlPlaneOperation.pipeline_config_operation:type_name -> stratum.testing.ControlPlaneOperation.PipelineConfigOperation
	26, // 3: stratum.testing.ControlPlaneExpectation.read_expectation:type_name -> stratum.testing.ControlPlaneExpectation.ReadExpectation
	27, // 4: stratum.testing.ControlPlaneExpectation.packet_in_expectation:type_name -> stratum.testing.ControlPlaneExpectation.PacketInExpectation
	28, // 5: stratum.testing.ControlPlaneExpectation.pipeline_config_expectation:type_name -> stratum.testing.ControlPlaneExpectation.PipelineConfigExpectation
	29, // 6: stratum.testing.DataPlaneStimulus.traffic_stimulus:type_name -> stratum.testing.DataPlaneStimulus.TrafficStimulus
	31, // 7: stratum.testing.DataPlaneExpectation.traffic_expectation:type_name -> stratum.testing.DataPlaneExpectation.TrafficExpectation
	38, // 8: stratum.testing.ConfigOperation.gnmi_set_request:type_name -> gnmi.SetRequest
	39, // 9: stratum.testing.ConfigOperation.gnmi_set_response:type_name -> gnmi.SetResponse
	40, // 10: stratum.testing.PortStimulus.interface:type_name -> gnmi.Path
	0,  // 11: stratum.testing.PortStimulus.state:type_name -> stratum.testing.PortStimulus.State
	40, // 12: stratum.testing.AlarmStimulus.alarm:type_name -> gnmi.Path
	41, // 13: stratum.testing.ConfigExpectation.gnmi_get_request:type_name -> gnmi.GetRequest
	42, // 14: stratum.testing.ConfigExpectation.gnmi_get_response:type_name -> gnmi.GetResponse
	34, // 15: stratum.testing.TelemetryExpectation.requirement:type_name -> stratum.testing.TelemetryExpectation.Requirement
	43, // 16: stratum.testing.TelemetryExpectation.gnmi_subscribe_request:type_name -> gnmi.SubscribeRequest
	20, // 17: stratum.testing.TelemetryExpectation.action_group:type_name -> stratum.testing.ActionGroup
	44, // 18: stratum.testing.TelemetryExpectation.gnmi_subscribe_response:type_name -> gnmi.SubscribeResponse
	10, // 19: stratum.testing.ManagementOperation.security_operation:type_name -> stratum.testing.SecurityOperation
	11, // 20: stratum.testing.ManagementOperation.diag_operation:type_name -> stratum.testing.DiagOperation
	12, // 21: stratum.testing.ManagementOperation.system_operation:type_name -> stratum.testing.SystemOperation
	13, // 22: stratum.testing.ManagementOperation.file_operation:type_name -> stratum.testing.FileOperation
	35, // 23: stratum.testing.Action.requirement:type_name -> stratum.testing.Action.Requirement
	5,  // 24: stratum.testing.Action.config_operation:type_name -> stratum.testing.ConfigOperation
	1,  // 25: stratum.testing.Action.control_plane_operation:type_name -> stratum.testing.ControlPlaneOperation
	3,  // 26: stratum.testing.Action.data_plane_stimulus:type_name -> stratum.testing.DataPlaneStimulus
	14, // 27: stratum.testing.Action.management_operation:type_name -> stratum.testing.ManagementOperation
	6,  // 28: stratum.testing.Action.port_stimulus:type_name -> stratum.testing.PortStimulus
	7,  // 29: stratum.testing.Action.alarm_stimulus:type_name -> stratum.testing.AlarmStimulus
	8,  // 30: stratum.testing.Expectation.config_expectation:type_name -> stratum.testing.ConfigExpectation
	2,  // 31: stratum.testing.Expectation.control_plane_expectation:type_name -> stratum.testing.ControlPlaneExpectation
	4,  // 32: stratum.testing.Expectation.data_plane_expectation:type_name -> stratum.testing.DataPlaneExpectation
	9,  // 33: stratum.testing.Expectation.telemetry_expectation:type_name -> stratum.testing.TelemetryExpectation
	15, // 34: stratum.testing.SequentialActionGroup.actions:type_name -> stratum.testing.Action
	36, // 35: stratum.testing.ParallelActionGroup.options:type_name -> stratum.testing.ParallelActionGroup.Options
	15, // 36: stratum.testing.ParallelActionGroup.actions:type_name -> stratum.testing.Action
	37, // 37: stratum.testing.RandomizedActionGroup.options:type_name -> stratum.testing.RandomizedActionGroup.Options
	15, // 38: stratum.testing.RandomizedActionGroup.actions:type_name -> stratum.testing.Action
	17, // 39: stratum.testing.ActionGroup.sequential_action_group:type_name -> stratum.testing.SequentialActionGroup
	18, // 40: stratum.testing.ActionGroup.parallel_action_group:type_name -> stratum.testing.ParallelActionGroup
	19, // 41: stratum.testing.ActionGroup.randomized_action_group:type_name -> stratum.testing.RandomizedActionGroup
	20, // 42: stratum.testing.TestCase.action_groups:type_name -> stratum.testing.ActionGroup
	16, // 43: stratum.testing.TestCase.expectations:type_name -> stratum.testing.Expectation
	21, // 44: stratum.testing.TestVector.test_cases:type_name -> stratum.testing.TestCase
	45, // 45: stratum.testing.ControlPlaneOperation.WriteOperation.p4_write_request:type_name -> p4.v1.WriteRequest
	46, // 46: stratum.testing.ControlPlaneOperation.WriteOperation.p4_write_response:type_name -> p4.v1.WriteResponse
	47, // 47: stratum.testing.ControlPlaneOperation.PacketOutOperation.p4_packet_out:type_name -> p4.v1.PacketOut
	48, // 48: stratum.testing.ControlPlaneOperation.PipelineConfigOperation.p4_set_pipeline_config_request:type_name -> p4.v1.SetForwardingPipelineConfigRequest
	49, // 49: stratum.testing.ControlPlaneOperation.PipelineConfigOperation.p4_set_pipeline_config_response:type_name -> p4.v1.SetForwardingPipelineConfigResponse
	50, // 50: stratum.testing.ControlPlaneExpectation.ReadExpectation.p4_read_request:type_name -> p4.v1.ReadRequest
	51, // 51: stratum.testing.ControlPlaneExpectation.ReadExpectation.p4_read_responses:type_name -> p4.v1.ReadResponse
	52, // 52: stratum.testing.ControlPlaneExpectation.PacketInExpectation.p4_packet_in:type_name -> p4.v1.PacketIn
	53, // 53: stratum.testing.ControlPlaneExpectation.PipelineConfigExpectation.p4_get_pipeline_config_request:type_name -> p4.v1.GetForwardingPipelineConfigRequest
	54, // 54: stratum.testing.ControlPlaneExpectation.PipelineConfigExpectation.p4_get_pipeline_config_response:type_name -> p4.v1.GetForwardingPipelineConfigResponse
	30, // 55: stratum.testing.DataPlaneStimulus.TrafficStimulus.packets:type_name -> stratum.testing.DataPlaneStimulus.TrafficStimulus.Packet
	33, // 56: stratum.testing.DataPlaneExpectation.TrafficExpectation.packets:type_name -> stratum.testing.DataPlaneExpectation.TrafficExpectation.Packet
	32, // 57: stratum.testing.DataPlaneExpectation.TrafficExpectation.distribution:type_name -> stratum.testing.DataPlaneExpectation.TrafficExpectation.Distribution
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_testvector_tv_proto_init() }
func file_testvector_tv_proto_init() {
	if File_testvector_tv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testvector_tv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlaneOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlaneExpectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneStimulus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneExpectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortStimulus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmStimulus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigExpectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryExpectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagementOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequentialActionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParallelActionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomizedActionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlaneOperation_WriteOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlaneOperation_PacketOutOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlaneOperation_PipelineConfigOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlaneExpectation_ReadExpectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlaneExpectation_PacketInExpectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPlaneExpectation_PipelineConfigExpectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneStimulus_TrafficStimulus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneStimulus_TrafficStimulus_Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneExpectation_TrafficExpectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneExpectation_TrafficExpectation_Distribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPlaneExpectation_TrafficExpectation_Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryExpectation_Requirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action_Requirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParallelActionGroup_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testvector_tv_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomizedActionGroup_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_testvector_tv_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ControlPlaneOperation_WriteOperation_)(nil),
		(*ControlPlaneOperation_PacketOutOperation_)(nil),
		(*ControlPlaneOperation_PipelineConfigOperation_)(nil),
	}
	file_testvector_tv_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ControlPlaneExpectation_ReadExpectation_)(nil),
		(*ControlPlaneExpectation_PacketInExpectation_)(nil),
		(*ControlPlaneExpectation_PipelineConfigExpectation_)(nil),
	}
	file_testvector_tv_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*DataPlaneStimulus_TrafficStimulus_)(nil),
	}
	file_testvector_tv_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*DataPlaneExpectation_TrafficExpectation_)(nil),
	}
	file_testvector_tv_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ManagementOperation_SecurityOperation)(nil),
		(*ManagementOperation_DiagOperation)(nil),
		(*ManagementOperation_SystemOperation)(nil),
		(*ManagementOperation_FileOperation)(nil),
	}
	file_testvector_tv_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Action_ConfigOperation)(nil),
		(*Action_ControlPlaneOperation)(nil),
		(*Action_DataPlaneStimulus)(nil),
		(*Action_ManagementOperation)(nil),
		(*Action_PortStimulus)(nil),
		(*Action_AlarmStimulus)(nil),
	}
	file_testvector_tv_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Expectation_ConfigExpectation)(nil),
		(*Expectation_ControlPlaneExpectation)(nil),
		(*Expectation_DataPlaneExpectation)(nil),
		(*Expectation_TelemetryExpectation)(nil),
	}
	file_testvector_tv_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ActionGroup_SequentialActionGroup)(nil),
		(*ActionGroup_ParallelActionGroup)(nil),
		(*ActionGroup_RandomizedActionGroup)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testvector_tv_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_testvector_tv_proto_goTypes,
		DependencyIndexes: file_testvector_tv_proto_depIdxs,
		EnumInfos:         file_testvector_tv_proto_enumTypes,
		MessageInfos:      file_testvector_tv_proto_msgTypes,
	}.Build()
	File_testvector_tv_proto = out.File
	file_testvector_tv_proto_rawDesc = nil
	file_testvector_tv_proto_goTypes = nil
	file_testvector_tv_proto_depIdxs = nil
}
